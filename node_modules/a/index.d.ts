export interface Slot {
  a: {
    aa: string
  }

  dev: () => string
}

// 方案一：遍历
type K = keyof Slot
export interface Get {
  // (keys: [], cb: (values: []) => void): void  // 加了这一行会导致不提示 keys
  <K1 extends K>(keys: [K1], cb: (values: [Slot[K1]]) => void): void
  <K1 extends K, K2 extends K>(keys: [K1, K2], cb: (values: [Slot[K1], Slot[K2]]) => void): void
  <K1 extends K, K2 extends K, K3 extends K>(keys: [K1, K2, K3], cb: (values: [Slot[K1], Slot[K2], Slot[K3]]) => void): void
  <K1 extends K, K2 extends K, K3 extends K, K4 extends K>(keys: [K1, K2, K3, K4], cb: (values: [Slot[K1], Slot[K2], Slot[K3], Slot[K4]]) => void): void
}
export const get: Get


// 方案二：const
type K_ARRAY = readonly K[]
export interface Get2 {
  <KS extends K_ARRAY>(keys: KS, cb: (values: [Slot[KS[0]], Slot[KS[1]], Slot[KS[2]], Slot[KS[3]], Slot[KS[4]], Slot[KS[5]], Slot[KS[6]], Slot[KS[7]]]) => void): void
}

export const get2: Get2
